////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright (C) 2017 by Lucas Brémond
///
/// This file is part of the Spacer project.
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @file                       Spacer/Core/Logger/Source.cpp
/// @author                     Lucas Brémond <lucas.bremond@gmail.com>
/// @date                       20 Dec 2017

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Spacer/Core/Logger/Source.hpp>
#include <Spacer/Core/Logger/Sources/Source.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace spacer
{
namespace core
{
namespace logger
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                Source::Source                              (   const   String&                     aChannel                            )
                                :   sourceUPtr_(std::make_unique<sources::Source>(aChannel))
{

}

                                Source::Source                              (   const   Source&                     aSource                             )
                                :   sourceUPtr_((aSource.sourceUPtr_ != nullptr) ? aSource.sourceUPtr_->clone() : nullptr)
{

}

Source&                         Source::operator =                          (   const   Source&                     aSource                             )
{

    if (this != &aSource)
    {
        sourceUPtr_.reset((aSource.sourceUPtr_ != nullptr) ? aSource.sourceUPtr_->clone() : nullptr) ;
    }

    return (*this) ;

}

Source                          Source::Undefined                           ( )
{
    return Source("") ;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////